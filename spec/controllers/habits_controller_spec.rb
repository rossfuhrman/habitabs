require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ActivitiesController do
  login_user

  before(:each) do
      @activity = Activity.new :title => "hey"
      @activity.user = subject.current_user
      @activity.save
      #activity = FactoryGirl.create(:activity)
  end

  it "should have a current_user" do
    # note the fact that I removed the "validate_session" parameter if this was a scaffold-generated controller
    subject.current_user.should_not be_nil
  end
 
  it "should get index" do
    # Note, rails 3.x scaffolding may add lines like get :index, {}, valid_session
    # the valid_session overrides the devise login. Remove the valid_session from your specs
    get 'index'
    response.should be_success
  end

  # This should return the minimal set of attributes required to create a valid
  # Activity. As you add validations to Activity, be sure to
  # adjust the attributes here as well.
  #let(:valid_attributes) { { "title" => "MyString", "user" => @user.id } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ActivitiesController. Be sure to keep this updated too.
  #let(:valid_session) { {} }
  #

  describe "GET index" do
    it "assigns all users activities as @activities" do
      #FactoryGirl.create(:other_users_activity)
      other_activity = Activity.new :title => "some other title"
      other_activity.user = FactoryGirl.create(:other_user)
      other_activity.save

      get :index, {}
      assigns(:activities).should eq([@activity])
    end

    it "sets @date_range if no params are passed" do
      get :index, {}
      assigns(:date_range).should be_a(DateRange)
    end

    it "sets @start_date_for_previous_link to today if no params are passed" do
      get :index, {}
      assigns(:start_date_for_previous_link).should_not be_nil
    end

    it "leaves @start_date_for_next_link empty if today is the last day of @date_range" do
      get :index, {}
      assigns(:start_date_for_next_link).should eq(nil)
    end

    it "sets @start_date_for_previous_link to 7 days before last @date_range value if params are passed" do
      start_date = Time.current.to_date
      get :index, {:start_date => start_date}
      assigns(:start_date_for_previous_link).should_not be_nil
    end

    it "sets @start_date_for_next_link if :start_date is in the week prior to this one " do
      start_date = Time.current.to_date - 7
      get :index, {:start_date => start_date}
      assigns(:start_date_for_next_link).should_not be_nil
    end

    it "sets @start_date_for_next_link if :start_date is two weeks prior to this one " do
      start_date = Time.current.to_date - 14
      get :index, {:start_date => start_date}
      assigns(:start_date_for_next_link).should_not be_nil
    end

  end


  describe "GET show" do
    it "assigns the requested activity as @activity" do
      get :show, {:id => @activity.to_param}
      assigns(:activity).should eq(@activity)
    end
  end

  describe "GET new" do
    it "assigns a new activity as @activity" do
      get :new, {}
      assigns(:activity).should be_a_new(Activity)
    end
  end

  describe "GET edit" do
    it "assigns the requested activity as @activity" do
      get :edit, {:id => @activity.to_param}
      assigns(:activity).should eq(@activity)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Activity" do
        expect {
          post :create, {:activity => FactoryGirl.build(:activity).attributes}
        }.to change(Activity, :count).by(1)
      end

      it "assigns a newly created activity as @activity" do
        activity_params = FactoryGirl.build(:activity).attributes
        post :create, {:activity => activity_params}
        assigns(:activity).should be_a(Activity)
        assigns(:activity).should be_persisted
      end

      it "redirects to the created activity" do
        post :create, {:activity => FactoryGirl.build(:activity).attributes}
        response.should redirect_to(Activity.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved activity as @activity" do
        # Trigger the behavior that occurs when invalid params are submitted
        Activity.any_instance.stub(:save).and_return(false)
        post :create, {:activity => { "title" => "invalid value" }}
        assigns(:activity).should be_a_new(Activity)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Activity.any_instance.stub(:save).and_return(false)
        post :create, {:activity => { "title" => "invalid value" }}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested activity" do
        # Assuming there are no other activities in the database, this
        # specifies that the Activity created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Activity.any_instance.should_receive(:update).with({ "title" => "MyString", "user_id" => 1 })
        put :update, {:id => @activity.to_param, :activity => { "title" => "MyString" }}
      end

      it "assigns the requested activity as @activity" do
        put :update, {:id => @activity.to_param, :activity => { "title" => "MyString" }}
        assigns(:activity).should eq(@activity)
      end

      it "redirects to the activity" do
        put :update, {:id => @activity.to_param, :activity => { "title" => "MyString" }}
        response.should redirect_to(@activity)
      end
    end

    describe "with invalid params" do
      it "assigns the activity as @activity" do
        # Trigger the behavior that occurs when invalid params are submitted
        Activity.any_instance.stub(:save).and_return(false)
        put :update, {:id => @activity.to_param, :activity => { "title" => "invalid value" }}
        assigns(:activity).should eq(@activity)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Activity.any_instance.stub(:save).and_return(false)
        put :update, {:id => @activity.to_param, :activity => { "title" => "invalid value" }}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested activity" do
      expect {
        delete :destroy, {:id => @activity.to_param}
      }.to change(Activity, :count).by(-1)
    end

    it "destroys the marks for the activity" do
      Mark.create mark_date: Time.current.to_date, activity_id: @activity.id, count: 1

      expect{
        delete :destroy, {:id => @activity.to_param}
      }.to change(Mark, :count).by(-1)
    end

    it "redirects to the activities list" do
      delete :destroy, {:id => @activity.to_param}
      response.should redirect_to(activities_url)
    end
  end

end
